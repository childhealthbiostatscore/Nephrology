sex = "sex",
weight = "weight_kg",
height = "height_cm",
age = "age_months",
index = "all")
# Calculate WHO z-scores for weight-for-age, height-for-age, and BMI-for-age
data2 = data %>% select(arbpersonid, sex, weight_kg, height_cm, age_months) %>% filter(complete.cases(.))
zScores <- getAllWGS(data = data2,
sex = "sex",
weight = "weight_kg",
height = "height_cm",
age = "age_months",
index = "all")
getAllWGS(sex = 1,
weight = 14.6,
height = 98,
age = 52,
index = "hfa")
getAllWGS(sex = 1,
weight = 14.6,
height = 98,
age = 52,
index = "all")
getAllWGS(sex = c(1,2),
weight = c(14.6,13),
height = c(98,67),
age = c(52,44),
index = "all")
getAllWGS(sex = c(1,2),
weight = c(14.6,13),
height = c(98,NA),
age = c(52,44),
index = "all")
View(data2)
# Calculate WHO z-scores for weight-for-age, height-for-age, and BMI-for-age
data2 = data %>% select(arbpersonid, sex12, weight_kg, height_cm, age_months) %>% filter(complete.cases(.))
zScores <- getAllWGS(data = data2,
sex = data2$sex12,
weight = data2$weight_kg,
height = data2$height_cm,
age = data2$age_months,
index = "all")
zScores <- getAllWGS(                     sex = data2$sex12,
weight = data2$weight_kg,
height = data2$height_cm,
age = data2$age_months,
index = "all")
getAllWGS(sex = c(1,2),
weight = c(14.6,13),
height = c(98,NA),
age = c(52,44),
index = "all")
test = c(2.2,4.4)
test = c(52,44)
getAllWGS(sex = c(1,2),
weight = c(14.6,13),
height = c(98,NA),
age = test,
index = "all")
tests = c(data2$sex12)
testa = c(data2$age_months)
getAllWGS(sex = tests,
weight = testw,
height = testh,
age = testa,
index = "all")
testw = c(data2$weight_kg)
testh = c(data2$height_cm)
testa = c(data2$age_months)
getAllWGS(sex = tests,
weight = testw,
height = testh,
age = testa,
index = "all")
testa = c(head(data2$age_months))
testh = c(head(data2$height_cm))
testw = c(head(data2$weight_kg))
tests = c(head(data2$sex12))
getAllWGS(sex = tests,
weight = testw,
height = testh,
age = testa,
index = "all")
play <- FOR_Zscore # save progress on the play dataset
play$weight_oz = as.numeric(play$weight_oz)
play$height_in = as.numeric(play$height_in)
play$BSA_sqm = as.numeric(play$BSA_sqm)
play$Sex = ifelse(play$Sex == "Unknown", NA, play$Sex)
play$weight_kg = play$weight_oz*0.0283495
play$height_cm = ifelse(play$height_in==0,NA,round(play$height_in*2.54,1))
play = play %>% mutate(sex12 = case_when(Sex == "Male" ~ 1, Sex == "Female" ~ 2, TRUE ~ NA))
play = play %>% select(ArbPersonID:Death_YN, weight_oz:BaselineResultValue)
write.csv2(play, "play.csv")
play <- read.csv2("S:/Sakamoto/Nephrology/Data/derived datasets/play.csv")
View(play)
# temp tab 3
tab_3_TEMP = read.csv2("S:/Sakamoto/Nephrology/Data/derived datasets/play.csv") %>% select(-X)
View(tab_3_TEMP)
library(tidyverse)
library(ggplot2)
library(table1)
library(knitr)
# Set up paths and read data
# Adjust file paths to match your system
tab_1_person <- read.csv("S:/Sakamoto/Nephrology/Data/Table1 Person Table.csv")
tab_2_encount <- read.csv("S:/Sakamoto/Nephrology/Data/Table2 Encounter Table.csv")
tab_4_labs <- read.csv("S:/Sakamoto/Nephrology/Data/Table 4 Labs.csv")
tab_7_proc <- read.csv("S:/Sakamoto/Nephrology/Data/Table 7 Procedures Table.csv")
tab_8_adt <- read.csv("S:/Sakamoto/Nephrology/Data/Table 8 ADT Table.csv")
# temp tab 3
tab_3_TEMP = read.csv2("S:/Sakamoto/Nephrology/Data/derived datasets/play.csv") %>% select(-X)
# Step 1: Initial data setup
AKI_COMPASS_DATA_T1 <- tab_1_person
# Step 2: Derive and clean up variables
# Create Diff_DOD and ID_DOD_89 variables
## THESE DONT EXIST ANYMORE IN CURRENT T1
# AKI_COMPASS_DATA_T1 <- AKI_COMPASS_DATA_T1 %>%
#   mutate(
#     Diff_DOD = abs(Days_from_DOB_to_Epic_DOD - Days_from_DOB_to_CDPHE_DOD),
#     ID_DOD_89 = ifelse(is.na(Days_from_DOB_to_Epic_DOD) & is.na(Days_from_DOB_to_CDPHE_DOD), NA,
#                   ifelse(Days_from_DOB_to_Epic_DOD == "" | Days_from_DOB_to_CDPHE_DOD == "", 1, 0))
#   )
# Step 3: Frequency and descriptive statistics
# Frequency table for missing demographics
freq_table_t1 <- AKI_COMPASS_DATA_T1 %>%
summarise(across(c(Sex, race, ethnicity, Death_YN), ~sum(is.na(.)))) # none missing
# Summary statistics for `DaysDOBtoEpicDeath`
summary_stats_t1 <- AKI_COMPASS_DATA_T1 %>%
summarise(
n = n(),
nmiss = sum(is.na(DaysDOBtoEpicDeath)),
mean = mean(DaysDOBtoEpicDeath, na.rm = TRUE),
median = median(DaysDOBtoEpicDeath, na.rm = TRUE),
q1 = quantile(DaysDOBtoEpicDeath, 0.25, na.rm = TRUE),
q3 = quantile(DaysDOBtoEpicDeath, 0.75, na.rm = TRUE),
min = min(DaysDOBtoEpicDeath, na.rm = TRUE),
max = max(DaysDOBtoEpicDeath, na.rm = TRUE)
)
# Step 4: Filter data for large differences
## THIS OBSOLETE WITH NO MORE CDPHE VAR TO COMPARE
# play_data_365 <- AKI_COMPASS_DATA_T1 %>%
#   filter(Diff_DOD > 365)
#
# play_data_7 <- AKI_COMPASS_DATA_T1 %>%
#   filter(Diff_DOD > 7)
# Step 5: Subset data for analysis
#AKI_COMPASS_DATA_T2 <- tab_2_encount
AKI_COMPASS_DATA_T2 <- tab_2_encount %>%
filter(ArbPersonID %in% AKI_COMPASS_DATA_T1$ArbPersonID)
# Step 6: Derive Age-based flags
first <- AKI_COMPASS_DATA_T2 %>%
arrange(ArbPersonID, AgeDays) %>%
group_by(ArbPersonID) %>%
slice(1) %>%
ungroup()
first_X_age <- first %>%
mutate(
FLAG_missing_age = is.na(AgeDays),
FLAG_kid_age = ifelse(AgeDays <= 6570 & AgeDays > 0, TRUE, FALSE)
)
# Step 7: Frequency and summary statistics for first age
age_flags_summary <- first_X_age %>%
summarise(
missing_age_flag = sum(FLAG_missing_age, na.rm = TRUE),
kid_age_flag = sum(FLAG_kid_age, na.rm = TRUE)
)
baseline_summary <- first_X_age %>%
summarise(
n = n(),
nmiss = sum(is.na(BaselineResultValue)),
mean = mean(BaselineResultValue, na.rm = TRUE),
median = median(BaselineResultValue, na.rm = TRUE),
q1 = quantile(BaselineResultValue, 0.25, na.rm = TRUE),
q3 = quantile(BaselineResultValue, 0.75, na.rm = TRUE),
min = min(BaselineResultValue, na.rm = TRUE),
max = max(BaselineResultValue, na.rm = TRUE)
)
# Step 8: Filter unreasonable BaselineResultValue
over_8 <- first_X_age %>%
filter(BaselineResultValue > 8)
### COMBINE TABS 1 AND 2 using AKICOMPASS1 and FIRSTXAGE
analysis = full_join(AKI_COMPASS_DATA_T1, first_X_age, by = c("ArbPersonID"))
# add in unreasonable baseline result value flag
analysis = analysis %>% mutate(FLAG_Baselineresultvalue = ifelse(BaselineResultValue > 8 | is.na(BaselineResultValue), TRUE, FALSE))
# sum(analysis$FLAG_Baselineresultvalue) # 3443
# sum(is.na(analysis$BaselineResultValue)) # 3402 -- 41 values above 8
# filter out age 18 and age 0
analysis= analysis%>% filter(FLAG_kid_age == T)
# Step 9: Lab data analysis
AKI_COMPASS_DATA_T4 <- tab_4_labs %>%
filter(ArbPersonID %in% AKI_COMPASS_DATA_T1$ArbPersonID)
AKI_COMPASS_DATA_T4 = left_join(AKI_COMPASS_DATA_T4,analysis, by=c("ArbPersonID"))
# not calcing well fix after hearing form john on creatine labels to use and how to stage
labs_cr <- AKI_COMPASS_DATA_T4 %>%
filter(LabCompName %in% c("POCT Creatinine", "Creatinine, Serum/Plasma", "Creatinine Serum/Plasma - U")) %>%
mutate(
Stage1_flag = ifelse((DaysFromDOBtoCollection - AgeDays <= 2 & NumericValue - BaselineResultValue >= 0.3) |
(DaysFromDOBtoCollection - AgeDays <= 7 & NumericValue / BaselineResultValue >= 1.5), 1, 0),
Stage2_flag = ifelse(NumericValue / BaselineResultValue >= 2, 1, 0),
Stage3_flag = ifelse(NumericValue / BaselineResultValue >= 3 | NumericValue >= 4, 1, 0))
labs_cr = labs_cr %>% mutate(Stage = case_when(Stage1_flag == 1 ~ 1,
Stage2_flag == 1 ~ 2,
Stage3_flag == 1 ~ 3,
TRUE ~ 0))
# Output frequency of stages
stage_summary <- labs_cr %>%
group_by(Stage) %>%
summarise(count = n())
#tables1,2 combined into person + first encounter in "analysis" dataset
####
# COMBINE ANALYSIS AND TABLE 4 HERE
####
# Step 10: Table 7, Nephrology consult
# may need to confirm date happens during admission
tab_7_consult = tab_7_proc %>% filter(ProcedureName == "CONSULT INPT NEPHROLOGY")
analysis = left_join(analysis, tab_7_consult)
# analysis %>% summarise(sum(!is.na(ProcedureName)))
# Step 11: Table 8: Admission, discharge dates etc
# lot of duplicate transfer in/out, lets just look at discharge/admission for now
# create admission and discharge col to easy compare
tab8_adm = tab_8_adt %>% select(ArbPersonID, ArbEncounterID, EventType, DaysFromDOBtoEventdate) %>% filter(EventType %in% c("Admission"))
tab8_dis = tab_8_adt %>% select(ArbPersonID, ArbEncounterID, EventType, DaysFromDOBtoEventdate) %>% filter(EventType %in% c("Discharge"))
tab8_adm_w <- tab8_adm %>%
pivot_wider(
names_from = EventType,
values_from = DaysFromDOBtoEventdate,
values_fn = min
) %>%
mutate(across(where(is.character), ~ na_if(., "NULL"))) %>%
mutate(across(where(is.character), as.numeric))
tab8_dis_w <- tab8_dis %>%
pivot_wider(
names_from = EventType,
values_from = DaysFromDOBtoEventdate,
values_fn = max
) %>%
mutate(across(where(is.character), ~ na_if(., "NULL"))) %>%
mutate(across(where(is.character), as.numeric))
# add in to analysis dataset
analysis = left_join(analysis, tab8_adm_w)
analysis = left_join(analysis, tab8_dis_w)
rm(tab8_adm, tab8_adm_w, tab8_dis, tab8_dis_w)
# number of missing admissions/discharge
# sum(is.na(analysis$Admission));sum(is.na(analysis$Discharge))
# create a flag for death at admission n = 16
analysis$FLAG_died_admission <- analysis$Admission == analysis$DaysDOBtoEpicDeath
# sum(analysis$FLAG_died_admission, na.rm = T)
analysis$death_discharge_days_diff <- analysis$DaysDOBtoEpicDeath - analysis$Discharge
# Categorize the difference
analysis$mortality_after_discharge <- cut(analysis$death_discharge_days_diff,
breaks = c(-Inf,0 , 30, 90, 365, 730, 1825, 3650, Inf),
labels = c("Before Discharge","<30 days", "30-90 days", "90 days-1 year", "1-2 years", "2-5 years", "5-10 years", ">10 years"),
right = FALSE)
analysis = left_join(analysis, tab_3_TEMP)
View(analysis)
tab_3_TEMP$weight_kg = tab_3_TEMP$weight_oz*0.0283495
tab_3_TEMP$height_cm = ifelse(tab_3_TEMP$height_in==0,NA,round(tab_3_TEMP$height_in*2.54,1))
# Define age in months
tab_3_TEMP <- tab_3_TEMP %>%
mutate(age_months = floor(AgeDays/30))
# Calculate BMI
tab_3_TEMP <- tab_3_TEMP %>%
mutate(bmi = weight_kg / (height_cm / 100) ^ 2)
View(tab_3_TEMP)
analysis = left_join(analysis, tab_3_TEMP)
View(analysis)
View(tab_7_proc)
# ALL Vars t1 and t2
t1_all = table1(~ Sex+ race + ethnicity + height_cm +weight_kg + bmi + BSA_sqm + AgeDays +Hospital + State  + AKICohortYN + CRRTCohortYN + AKILabYN +
AKIDxYN + BaselineResultValue+ DaysDOBtoEpicDeath + Death_YN + FLAG_died_admission + mortality_after_discharge,
data = analysis)
t1_all
#sum(analysis$FLAG_kid_age)
# 15070 out of 18904 had a T flag for kid age (between 1 and 6570 days)
# Variables of interest for T1
# ALL Vars t1 and t2
t1_all = table1(~ Sex+ race + ethnicity + height_cm +weight_kg + bmi + BSA_sqm + AgeDays +Hospital + State  + AKICohortYN + CRRTCohortYN + AKILabYN +
AKIDxYN + BaselineResultValue+ DaysDOBtoEpicDeath + Death_YN + FLAG_died_admission + mortality_after_discharge,
data = analysis)
t1_all
table(analysis$FLAG_died_admission)
table(analysis$mortality_after_discharge)
t1_all
wfa(tab_3_TEMP$age_months, tab_3_TEMP$weight_oz)
?wfa
library(zscorer)
library(zscorer)
?wfa
View(analysis)
# tab2 cleaning
## primary admission dx derivation
# examine what we are looking at
# 2944 different categories with
Dx1 = as.data.frame(table(analysis$PrimaryDx))
# 523 have frequency of 5 or greater.
# Dx1_g5 = Dx1 %>% filter(Freq >4)
# it looks like a lot of these categories can maybe be compressed using grepl or some sort of string matching function
## financial class
FC1 = as.data.frame(table(analysis$payorfinancialclass))
# this one seems more easy to clean up with a grepl string match -- confirm that this is ok with john
# tab 7 cleaning:
# look for neph consult in procedures
consult_df = as.data.frame(table(tab_7_proc$ProcedureName))
# looks pretty clear cut -- only one category for neph consult -- double check with John that this makes sense
View(consult_df)
View(tab_7_proc)
tab_7_proc_sum <- tab_7_proc %>%
group_by(ArbPersonID) %>%
summarise(ProcedureNames = paste(ProcedureName, collapse = "|"))
View(tab_7_proc_sum)
tab_7_proc_sum <- tab_7_proc %>%
group_by(ArbPersonID) %>%
summarise(ProcedureNames = paste(ProcedureName, collapse = " | "))
tab_7_proc_sum <- tab_7_proc %>%
group_by(ArbPersonID) %>%
summarise(ProcedureNames = paste(ProcedureName, collapse = " | ")) %>% select(ArbPersonID, ProcedureNames)
View(tab_7_proc_sum)
analysis = left_join(analysis, tab_7_proc_sum)
library(stringr)
FC1
analysis = analysis %>% mutate(payorfinancialclass2 = case_when(str_detect(payorfinancialclass, "Commercial") ~ "Commercial",
str_detect(payorfinancialclass, "Contract") ~ "Contract",
str_detect(payorfinancialclass, "Indigent Care") ~ "Indigent Care",
str_detect(payorfinancialclass, "Medicaid") ~ "Medicaid",
str_detect(payorfinancialclass, "Medicare") ~ "Medicare",
str_detect(payorfinancialclass, "NonContract") ~ "NonContract",,
str_detect(payorfinancialclass, "Other") ~ "Other",
str_detect(payorfinancialclass, "Tricare") ~ "Tricare",
str_detect(payorfinancialclass, "Self-Pay") ~ "Self-Pay",))
analysis = analysis %>% mutate(payorfinancialclass2 = case_when(str_detect(payorfinancialclass, "Commercial") ~ "Commercial",
str_detect(payorfinancialclass, "Contract") ~ "Contract",
str_detect(payorfinancialclass, "Indigent Care") ~ "Indigent Care",
str_detect(payorfinancialclass, "Medicaid") ~ "Medicaid",
str_detect(payorfinancialclass, "Medicare") ~ "Medicare",
str_detect(payorfinancialclass, "NonContract") ~ "NonContract",,
str_detect(payorfinancialclass, "Other") ~ "Other",
str_detect(payorfinancialclass, "Tricare") ~ "Tricare",
str_detect(payorfinancialclass, "Self-Pay") ~ "Self-Pay"))
analysis = analysis %>% mutate(payorfinancialclass2 = case_when(str_detect(payorfinancialclass, "Commercial") ~ "Commercial",
str_detect(payorfinancialclass, "Contract") ~ "Contract",
str_detect(payorfinancialclass, "Indigent Care") ~ "Indigent Care",
str_detect(payorfinancialclass, "Medicaid") ~ "Medicaid",
str_detect(payorfinancialclass, "Medicare") ~ "Medicare",
str_detect(payorfinancialclass, "NonContract") ~ "NonContract",,
str_detect(payorfinancialclass, "Other") ~ "Other",
str_detect(payorfinancialclass, "Tricare") ~ "Tricare",
str_detect(payorfinancialclass, "Self-Pay") ~ "Self-Pay",
TRUE ~ NA))
analysis = analysis %>% mutate(payorfinancialclass2 = case_when(str_detect(payorfinancialclass, "Commercial") ~ "Commercial",
str_detect(payorfinancialclass, "Contract") ~ "Contract",
str_detect(payorfinancialclass, "Indigent Care") ~ "Indigent Care",
str_detect(payorfinancialclass, "Medicaid") ~ "Medicaid",
str_detect(payorfinancialclass, "Medicare") ~ "Medicare",
str_detect(payorfinancialclass, "NonContract") ~ "NonContract",
str_detect(payorfinancialclass, "Other") ~ "Other",
str_detect(payorfinancialclass, "Tricare") ~ "Tricare",
str_detect(payorfinancialclass, "Self-Pay") ~ "Self-Pay",
TRUE ~ NA))
# ALL Vars t1 and t2
t1_all = table1(~ Sex+ race + ethnicity + height_cm +weight_kg + bmi + BSA_sqm + AgeDays +Hospital + State + payorfinancalclass2  + AKICohortYN + CRRTCohortYN + AKILabYN +
AKIDxYN + BaselineResultValue+ DaysDOBtoEpicDeath + Death_YN + FLAG_died_admission + mortality_after_discharge + ProcedureNames,
data = analysis)
# ALL Vars t1 and t2
t1_all = table1(~ Sex+ race + ethnicity + height_cm +weight_kg + bmi + BSA_sqm + AgeDays +Hospital + State + payorfinancialclass2  + AKICohortYN + CRRTCohortYN + AKILabYN +
AKIDxYN + BaselineResultValue+ DaysDOBtoEpicDeath + Death_YN + FLAG_died_admission + mortality_after_discharge + ProcedureNames,
data = analysis)
t1_all
# procnames
kable(table(analysis$ProcedureNames))
###################################
# Financial class
analysis = analysis %>% mutate(payorfinancialclass2 = case_when(str_detect(payorfinancialclass, "Commercial") ~ "Commercial",
str_detect(payorfinancialclass, "Contract") ~ ifelse(str_detect(payorfinancialclass,"Non"), "Non-Contract","Contract"),
str_detect(payorfinancialclass, "Indigent Care") ~ "Indigent Care",
str_detect(payorfinancialclass, "Medicaid") ~ "Medicaid",
str_detect(payorfinancialclass, "Medicare") ~ "Medicare",
str_detect(payorfinancialclass, "NonContract") ~ "NonContract",
str_detect(payorfinancialclass, "Other") ~ "Other",
str_detect(payorfinancialclass, "Tricare") ~ "Tricare",
str_detect(payorfinancialclass, "Self-Pay") ~ "Self-Pay",
TRUE ~ NA))
library(tidyverse)
library(stringr)
library(readr)
# tab 5
tab_5_admmeds <- read.csv("S:/Sakamoto/Nephrology/Data/Table 5 Administered Meds.csv")
# med list from pubmed article in DD
medications <- c("Ambisome", "Foscarnet", "Methotrexate",
"Amikacin", "Gadopentetate dimeglumine", "Nafcillin",
"Amphotericin B", "Gadoextate disodium", "Piperacillin/Tazobactam",
"Captopril", "Ganciclovir", "Piperacillin",
"Carboplatin", "Gentamicin", "Sirolimus",
"Cefotaxime", "Ibuprofen", "Sulfasalazine",
"Ceftazidime", "Ifosfamide", "Tacrolimus",
"Cefuroxime", "Iodixanol", "Ticarcillin/Clavulanic Acid",
"Cidofovir", "Iohexol", "Tobramycin",
"Cisplatin", "Iopamidol", "Topiramate",
"Colistimethate", "Ioversol", "Valacyclovir",
"Cyclosporine", "Ketorolac", "Valganciclovir",
"Dapsone", "Lisinopril", "Vancomycin",
"Enalapril", "Lithium", "Zonisamide")
# med list from pubmed article in DD
n_medications <- c("Ambisome", "Foscarnet", "Methotrexate",
"Amikacin", "Gadopentetate dimeglumine", "Nafcillin",
"Amphotericin B", "Gadoextate disodium", "Piperacillin/Tazobactam",
"Captopril", "Ganciclovir", "Piperacillin",
"Carboplatin", "Gentamicin", "Sirolimus",
"Cefotaxime", "Ibuprofen", "Sulfasalazine",
"Ceftazidime", "Ifosfamide", "Tacrolimus",
"Cefuroxime", "Iodixanol", "Ticarcillin/Clavulanic Acid",
"Cidofovir", "Iohexol", "Tobramycin",
"Cisplatin", "Iopamidol", "Topiramate",
"Colistimethate", "Ioversol", "Valacyclovir",
"Cyclosporine", "Ketorolac", "Valganciclovir",
"Dapsone", "Lisinopril", "Vancomycin",
"Enalapril", "Lithium", "Zonisamide")
rm(medications)
View(tab_5_admmeds)
matches <- sapply(tab_5_admmeds$Name, function(x) {
matched <- grep(paste(n_medications, collapse = "|"), x, ignore.case = TRUE)
if(length(matched) > 0) return(n_medications[matched]) else return(NA)
})
tab_5_admmeds$MatchedMedications <- apply(df, 1, function(row) {
# Search in both Name and GenericName columns
matches <- grep(paste(n_medications, collapse = "|"),
paste(row["Name"], row["GenericName"]),
ignore.case = TRUE)
# Return matched medication(s) or NA if no match
if(length(matches) > 0) {
return(paste(n_medications[matches], collapse = ", "))
} else {
return(NA)
}
})
tab_5_admmeds$MatchedMedications <- apply(tab_5_admmeds, 1, function(row) {
# Search in both Name and GenericName columns
matches <- grep(paste(n_medications, collapse = "|"),
paste(row["Name"], row["GenericName"]),
ignore.case = TRUE)
# Return matched medication(s) or NA if no match
if(length(matches) > 0) {
return(paste(n_medications[matches], collapse = ", "))
} else {
return(NA)
}
})
table(tab_5_admmeds$MatchedMedications)
# Create a column 'match' that stores TRUE/FALSE based on whether there is a match
tab_5_admmeds[, match := name %in% n_medications]
library(data.table)
# Create a column 'match' that stores TRUE/FALSE based on whether there is a match
tab_5_admmeds[, match := name %in% n_medications]
?tolower
# Create a column 'match' that stores TRUE/FALSE based on whether there is a match
tab_5_admmeds[, match := tolower(Name) %in% tolower(n_medications)]
paste(n_medications, collapse = "|")
# Create a column 'match' which checks if any word in the name matches any medication (case insensitive)
tab_5_admmeds[, match := sapply(Name, function(x) {
words <- unlist(strsplit(tolower(x), "\\s+"))  # Split name into words and convert to lowercase
any(sapply(words, function(word) any(grepl(tolower(word), tolower(n_medications)))))
})]
# Create a column 'match' which checks if any word in the name matches any medication (case insensitive)
DT(tab_5_admmeds)[, match := sapply(Name, function(x) {
words <- unlist(strsplit(tolower(x), "\\s+"))  # Split name into words and convert to lowercase
any(sapply(words, function(word) any(grepl(tolower(word), tolower(n_medications)))))
})]
?DT
# Create a column 'match' which checks if any word in the name matches any medication (case insensitive)
a = data.table(tab_5_admmeds)[, match := sapply(Name, function(x) {
words <- unlist(strsplit(tolower(x), "\\s+"))  # Split name into words and convert to lowercase
any(sapply(words, function(word) any(grepl(tolower(word), tolower(n_medications)))))
})]
# med list from pubmed article in DD
n_medications <- c("Ambisome", "Foscarnet", "Methotrexate",
"Amikacin", "Gadopentetate dimeglumine", "Nafcillin",
"Amphotericin B", "Gadoextate disodium", "Piperacillin","Tazobactam",
"Captopril", "Ganciclovir", "Piperacillin",
"Carboplatin", "Gentamicin", "Sirolimus",
"Cefotaxime", "Ibuprofen", "Sulfasalazine",
"Ceftazidime", "Ifosfamide", "Tacrolimus",
"Cefuroxime", "Iodixanol", "Ticarcillin","Clavulanic Acid",
"Cidofovir", "Iohexol", "Tobramycin",
"Cisplatin", "Iopamidol", "Topiramate",
"Colistimethate", "Ioversol", "Valacyclovir",
"Cyclosporine", "Ketorolac", "Valganciclovir",
"Dapsone", "Lisinopril", "Vancomycin",
"Enalapril", "Lithium", "Zonisamide")
# Create a column 'match' which checks if any word in the name matches any medication (case insensitive)
a = data.table(tab_5_admmeds)[, match := sapply(Name, function(x) {
words <- unlist(strsplit(tolower(x), "\\s+"))  # Split name into words and convert to lowercase
any(sapply(words, function(word) any(grepl(tolower(word), tolower(n_medications)))))
})]
# Create a column 'match' which checks if any word in the name matches any medication (case insensitive)
tab_5_admmeds <- transform(tab_5_admmeds, Topic=grepl(paste0(n_medications,collapse='|'), tab_5_admmeds$Name))
View(tab_5_admmeds)
library(tidyverse)
library(ggplot2)
library(table1)
library(knitr)
library(zscorer)
library(stringr)
# Set up paths and read data
# Adjust file paths to match your system
tab_1_person <- read.csv("S:/Sakamoto/Nephrology/Data/Table1 Person Table.csv")
tab_2_encount <- read.csv("S:/Sakamoto/Nephrology/Data/Table2 Encounter Table.csv")
tab_4_labs <- read.csv("S:/Sakamoto/Nephrology/Data/Table 4 Labs.csv")
tab_7_proc <- read.csv("S:/Sakamoto/Nephrology/Data/Table 7 Procedures Table.csv")
tab_8_adt <- read.csv("S:/Sakamoto/Nephrology/Data/Table 8 ADT Table.csv")
# temp tab 3
tab_3_TEMP = read.csv2("S:/Sakamoto/Nephrology/Data/derived datasets/play.csv") %>% select(-X)
View(tab_2_encount)
View(tab_4_labs)
